Given a string str. The task is to find the maximum occurring character in the string str. If more than one character occurs the maximum number of time then print the lexicographically smaller character.

Example 1:

Input:
str = testsample
Output: e
Explanation: e is the character which
is having the highest frequency.
Example 2:

Input:
str = output
Output: t
Explanation:  t and u are the characters
with the same frequency, but t is
lexicographically smaller.
Your Task:
The task is to complete the function getMaxOccuringChar() which returns the character which is most occurring.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(Number of distinct characters).
Note: N = |s|

Constraints:
1 ≤ |s| ≤ 100

class Solution
{
    public:
    
    //Function to find the maximum occurring character in a string.
    char getMaxOccuringChar(string s)
    {
        int a[26]={0};          // making an array for storing count of character
        for(int i=0;i<s.size();i++){
            char ch=s[i];
            int num=0;
            if(ch>='a'&&ch<='z'){
                num=ch-'a';              // finding corresponding number to character
            }
            else{
                num=ch-'a';
            }
            a[num]++;
            
        }
        int max=-1;
       int ans=0;       //it is storing index
        for(int i=0;i<26;i++){   //again traversing over array to to check highest count and returning corresponding element to that number.
            if(max<a[i]){
                max=a[i];
                ans=i;
             
            }
            
        }
       return ans+'a';
     
        
}
};
